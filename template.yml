AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Globals:
  Function:
    Timeout: 3

Resources:

  # Lambda Gestionar Compras | hu-tp-61
  LambdaPrueba:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/lambda-gestionar-compras/hu-tp-61/
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        LambdaPrueba:
          Type: Api
          Properties:
            Path: /qa
            Method: get






#FRONT -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  # S3 Buckets for s3-mf-administrador-qa
  MicrofrontBucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-administrador-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket1CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket1Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket1
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-administrador-qa/*"
            Principal: "*"

# S3 Buckets for s3-mf-clientes-qa
  MicrofrontBucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-clientes-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket2CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket2Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket2
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-clientes-qa/*"
            Principal: "*"

# S3 Bucket for s3-mf-entrenador-qa
  MicrofrontBucket3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-entrenador-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket3CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket3
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-entrenador-qa/*"
            Principal: "*"

# S3 Bucket for s3-mf-manager-qa
  MicrofrontBucket4:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-manager-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket4CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket4Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket4
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-manager-qa/*"
            Principal: "*"

# S3 Bucket for s3-mf-principal-qa
  MicrofrontBucket5:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-principal-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket5CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket5Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket5
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-principal-qa/*"
            Principal: "*"

# S3 Bucket for s3-mf-recepcionista-qa
  MicrofrontBucket6:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-recepcionista-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket6CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket6Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket6
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-recepcionista-qa/*"
            Principal: "*"

# S3 Bucket for s3-mf-instructor-qa
  MicrofrontBucket7:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-instructor-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket7CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket7Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket7
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-instructor-qa/*"
            Principal: "*"
