AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Globals:
  Function:
    Timeout: 3

Resources:

  HuTp01001: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-01-001
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiPost:
          Type: Api
          Properties:
            Path: /auth/hu-tp-01
            Method: post
        ApiPut:
          Type: Api
          Properties:
            Path: /auth/hu-tp-01
            Method: put

  HuTp02001:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-02-001
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiPatch:
          Type: Api
          Properties:
            Path: /aut/hu-tp-02
            Method: patch
        ApiPut:
          Type: Api
          Properties:
            Path: /auth/hu-tp-02
            Method: put

  HuTp04001:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-04-001
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiPostClienteLibre:
          Type: Api
          Properties:
            Path: /clientes/cliente-libre
            Method: post
        ApiPostClienteRegular:
          Type: Api
          Properties:
            Path: /clientes/cliente-regular
            Method: post

  HuTp04002:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-04-002
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /clientes/hu-tp-04
            Method: get
        ApiPatch:
          Type: Api
          Properties:
            Path: /clientes/hu-tp-04
            Method: patch
        ApiPost:
          Type: Api
          Properties:
            Path: /clientes/hu-tp-04
            Method: post

  HuTp04003:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-04-003
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /clientes/HU-04-003
            Method: get
        ApiPost:
          Type: Api
          Properties:
            Path: /clientes/HU-04-003
            Method: post

  HuTp04004:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-04-004
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiPost:
          Type: Api
          Properties:
            Path: /clientes/hu-tp-04-004
            Method: post

  HuTp04005:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-04-005
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiGetDetalle:
          Type: Api
          Properties:
            Path: /clientes/detalle
            Method: get

  HuTp11001:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-11-001
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /plan-de-entrenamiento/hu-tp-11
            Method: get
  HuTp14001:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-14-001
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /metricas-alumno/hu-tp-14
            Method: get

  HuTp17001:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-17-001
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /productos/hu-tp-17
            Method: get

  HuTp22001:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-22-001
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /metricas-alumno/hu-tp-22
            Method: get
        ApiPost:
          Type: Api
          Properties:
            Path: /metricas-alumno/hu-tp-22
            Method: post
        ApiPut:
          Type: Api
          Properties:
            Path: /metricas-alumno/hu-tp-22
            Method: put
            
  HuTp23001:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-23-001
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiGetAlumno:
          Type: Api
          Properties:
            Path: /metricas-alumno/hu-tp-23/alumno
            Method: get
        ApiGetBodyMetric:
          Type: Api
          Properties:
            Path: /metricas-alumno/hu-tp-23/bodymetric
            Method: get
        ApiGetDetailsClient:
          Type: Api
          Properties:
            Path: /metricas-alumno/hu-tp-23/detailsClient
            Method: get
            
  HuTp25001:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: BACK/hu-tp-25-001
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /empleados/hu-tp-25
            Method: get
        ApiPatch:
          Type: Api
          Properties:
            Path: /empleados/hu-tp-25
            Method: patch

        
  

#FRONT -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  # S3 Buckets for s3-mf-administrador-qa
  MicrofrontBucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-administrador-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket1CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket1Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket1
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-administrador-qa/*"
            Principal: "*"

# S3 Buckets for s3-mf-clientes-qa
  MicrofrontBucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-clientes-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket2CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket2Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket2
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-clientes-qa/*"
            Principal: "*"

# S3 Bucket for s3-mf-entrenador-qa
  MicrofrontBucket3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-entrenador-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket3CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket3
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-entrenador-qa/*"
            Principal: "*"

# S3 Bucket for s3-mf-manager-qa
  MicrofrontBucket4:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-manager-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket4CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket4Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket4
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-manager-qa/*"
            Principal: "*"

# S3 Bucket for s3-mf-principal-qa
  MicrofrontBucket5:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-principal-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket5CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket5Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket5
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-principal-qa/*"
            Principal: "*"

# S3 Bucket for s3-mf-recepcionista-qa
  MicrofrontBucket6:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-recepcionista-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket6CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket6Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket6
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-recepcionista-qa/*"
            Principal: "*"

# S3 Bucket for s3-mf-instructor-qa
  MicrofrontBucket7:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-mf-instructor-qa
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration: 
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            Id: MicrofrontBucket7CORS
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  MicrofrontBucket7Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MicrofrontBucket7
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::s3-mf-instructor-qa/*"
            Principal: "*"
